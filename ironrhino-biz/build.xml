<?xml version="1.0" encoding="utf-8"?>
<project name="ironrhino-biz" default="compile" basedir=".">

	<property name="version" value="1.0" />
	<property name="src.dir" location="${basedir}/src" />
	<property name="webapp.dir" location="${basedir}/webapp" />
	<property name="lib.dir" location="${basedir}/lib" />
	<property name="classes.dir" location="${webapp.dir}/WEB-INF/classes" />
	<property name="target.dir" location="${basedir}/target" />
	<property name="test.dir" location="${basedir}/test" />
	<property name="test.src.dir" location="${basedir}/test/src" />
	<property name="test.classes.dir" location="${basedir}/test/classes" />
	<property name="test.results.dir" location="${basedir}/test/results" />
	<property name="jar.name" value="${ant.project.name}-${version}.jar" />
	<property name="war.name" value="ROOT.war" />
	<property name="server.home" value="/tomcat" />
	<property name="server.check.port" value="8005" />
	<property name="webapp.deploy.dir" value="${server.home}/webapps/ROOT" />
	<condition property="cmd.suffix" value="bat">
		<os family="windows" />
	</condition>
	<condition property="cmd.suffix" value="sh">
		<os family="unix" />
	</condition>
	<property name="server.startup.cmd" value="${server.home}/bin/startup.${cmd.suffix}" />
	<property name="server.shutdown.cmd" value="${server.home}/bin/shutdown.${cmd.suffix}" />

	<path id="lib.classpath">
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${webapp.dir}/WEB-INF/lib">
			<include name="*.jar" />
		</fileset>
	</path>

	<target name="init">
		<mkdir dir="${target.dir}" />
		<mkdir dir="${classes.dir}" />
		<mkdir dir="${test.classes.dir}" />
	</target>

	<target name="compile">
		<antcall target="clean" />
		<antcall target="init" />
		<javac srcdir="${src.dir}" destdir="${classes.dir}" encoding="UTF-8">
			<classpath refid="lib.classpath" />
		</javac>
		<copy todir="${classes.dir}">
			<fileset dir="${src.dir}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<target name="test" depends="compile">
		<mkdir dir="${test.classes.dir}" />
		<javac srcdir="${test.src.dir}" destdir="${test.classes.dir}" encoding="utf-8">
			<classpath>
				<path refid="lib.classpath" />
				<pathelement location="${classes.dir}" />
			</classpath>
		</javac>
		<copy todir="${test.classes.dir}">
			<fileset dir="${test.src.dir}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<mkdir dir="${test.results.dir}" />
		<junit haltonfailure="no" printsummary="on">
			<classpath>
				<path refid="lib.classpath" />
				<pathelement location="${classes.dir}" />
				<pathelement location="${test.classes.dir}" />
			</classpath>
			<formatter type="brief" usefile="false" />
			<formatter type="plain" />
			<formatter type="xml" />
			<batchtest todir="${test.results.dir}">
				<fileset dir="${test.classes.dir}" includes="**/*Test.class" />
			</batchtest>
		</junit>
	</target>

	<target name="compress">
		<java jar="${lib.dir}/closure-compiler.jar" fork="true">
			<arg line=" --js=./webapp/assets/scripts/app.js --js_output_file=./webapp/assets/scripts/app-min.js" />
		</java>
		<java jar="${lib.dir}/yuicompressor.jar" fork="true">
			<arg line=" --charset utf-8 --type css -o ./webapp/assets/styles/app-min.css ./webapp/assets/styles/app.css" />
		</java>
		<java jar="${lib.dir}/yuicompressor.jar" fork="true">
			<arg line=" --charset utf-8 --type css -o ./webapp/assets/website/style-min.css ./webapp/assets/website/style.css" />
		</java>
	</target>

	<target name="jar">
		<mkdir dir="${target.dir}" />
		<delete file="${target.dir}/${jar.name}" />
		<jar jarfile="${target.dir}/${jar.name}" basedir="${classes.dir}" excludes="log4j.xml,struts.xml,resources/struts/**,resources/spring/**" />
	</target>

	<target name="war" depends="compress,jar">
		<move file="${target.dir}/${jar.name}" todir="${webapp.dir}/WEB-INF/lib" />
		<mkdir dir="${target.dir}/classes" />
		<move todir="${target.dir}/classes">
			<fileset dir="${webapp.dir}/WEB-INF/classes" excludes="log4j.xml,struts.xml,resources/struts/**,resources/spring/**" />
		</move>
		<war warfile="${target.dir}/${war.name}" basedir="${webapp.dir}" webxml="${webapp.dir}/WEB-INF/web.xml" />
		<move file="${webapp.dir}/WEB-INF/lib/${jar.name}" todir="${target.dir}" />
		<move todir="${webapp.dir}/WEB-INF/classes">
			<fileset dir="${target.dir}/classes" />
		</move>
		<delete dir="${target.dir}/classes" />
	</target>

	<target name="clean">
		<delete dir="${classes.dir}" />
		<delete dir="${test.classes.dir}" />
		<delete dir="${target.dir}" />
	</target>

	<target name="checkwebappdeployed">
		<available property="webapp.deployed" file="${webapp.deploy.dir}/WEB-INF/web.xml" />
	</target>

	<target name="checkserverstarted">
		<condition property="server.started">
			<socket server="localhost" port="${server.check.port}" />
		</condition>
	</target>

	<target name="checksvnupdated">
		<exec executable="svn" dir="${basedir}" outputproperty="svn.update.output">
			<arg value="update" />
		</exec>
		<echo message="${svn.update.output}" />
		<condition property="svn.updated">
			<matches pattern="^.*\n.*$" string="${svn.update.output}" multiline="true" />
		</condition>
	</target>

	<target name="backup" if="webapp.deployed" depends="checkwebappdeployed">
		<war warfile="${target.dir}/${war.name}.bak" basedir="${webapp.deploy.dir}" webxml="${webapp.deploy.dir}/WEB-INF/web.xml" />
	</target>

	<target name="update" if="svn.updated" depends="checksvnupdated">
		<antcall target="compile" />
		<sync todir="${webapp.deploy.dir}">
			<fileset dir="${webapp.dir}" />
			<preserveintarget>
				<include name="**/.*/**" />
				<include name="**/.class" />
				<include name="**/.jar" />
			</preserveintarget>
		</sync>
	</target>

	<target name="shutdown" if="server.started" depends="checkserverstarted">
		<exec executable="${server.shutdown.cmd}" dir="${server.home}" />
		<waitfor checkevery="2" checkeveryunit="second" maxwait="60" maxwaitunit="second">
			<not>
				<socket server="localhost" port="${server.check.port}" />
			</not>
		</waitfor>
		<sleep seconds="3" />
	</target>

	<target name="startup" depends="shutdown">
		<exec executable="${server.startup.cmd}" dir="${server.home}" spawn="true" />
	</target>

	<target name="deploy">
		<exec executable="svn" dir="${basedir}">
			<arg value="update" />
		</exec>
		<antcall target="compile" />
		<antcall target="war" />
		<antcall target="backup" />
		<antcall target="shutdown" />
		<delete dir="${webapp.deploy.dir}" />
		<unzip dest="${webapp.deploy.dir}" src="${target.dir}/${war.name}" />
		<antcall target="startup" />
	</target>

	<target name="rollback">
		<antcall target="shutdown" />
		<delete dir="${webapp.deploy.dir}" />
		<unzip dest="${webapp.deploy.dir}" src="${target.dir}/${war.name}.bak" />
		<antcall target="startup" />
	</target>


</project>
